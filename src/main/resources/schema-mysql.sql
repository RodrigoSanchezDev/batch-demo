-- =========================================
-- ESQUEMA DE BASE DE DATOS PARA MYSQL
-- Sistema de Procesamiento Bancario Batch
-- =========================================

-- Tablas del dominio bancario
CREATE TABLE IF NOT EXISTS transacciones (
    id BIGINT PRIMARY KEY,
    fecha DATE NOT NULL,
    monto DECIMAL(15,2) NOT NULL,
    tipo VARCHAR(20) NOT NULL,
    fecha_procesamiento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    es_anomalia BOOLEAN DEFAULT FALSE,
    motivo_anomalia VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS cuentas (
    cuenta_id BIGINT PRIMARY KEY,
    nombre VARCHAR(100),
    saldo DECIMAL(15,2) DEFAULT 0,
    edad INTEGER,
    tipo VARCHAR(20),
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS cuentas_anuales (
    cuenta_id BIGINT,
    fecha DATE,
    transaccion VARCHAR(20),
    monto DECIMAL(15,2),
    descripcion VARCHAR(500),
    fecha_procesamiento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (cuenta_id, fecha, transaccion, monto)
);

-- Tablas adicionales para reportes y anomalías
CREATE TABLE IF NOT EXISTS intereses_calculados (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    cuenta_id BIGINT NOT NULL,
    saldo_anterior DECIMAL(15,2),
    tasa_interes DECIMAL(5,4),
    interes_calculado DECIMAL(15,2),
    saldo_nuevo DECIMAL(15,2),
    fecha_calculo TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tipo_cuenta VARCHAR(20)
);

CREATE TABLE IF NOT EXISTS estados_cuenta_anuales (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    cuenta_id BIGINT NOT NULL,
    nombre VARCHAR(100),
    total_depositos DECIMAL(15,2) DEFAULT 0,
    total_retiros DECIMAL(15,2) DEFAULT 0,
    saldo_inicial DECIMAL(15,2) DEFAULT 0,
    saldo_final DECIMAL(15,2) DEFAULT 0,
    total_transacciones INTEGER DEFAULT 0,
    intereses_ganados DECIMAL(15,2) DEFAULT 0,
    año INTEGER NOT NULL,
    fecha_generacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS anomalias_transacciones (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    transaccion_id BIGINT,
    tipo_anomalia VARCHAR(100),
    descripcion VARCHAR(500),
    fecha_deteccion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    severidad VARCHAR(20) DEFAULT 'MEDIA'
);

-- Tablas de Spring Batch para MySQL
CREATE TABLE IF NOT EXISTS BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    VERSION BIGINT,
    JOB_NAME VARCHAR(100) NOT NULL,
    JOB_KEY VARCHAR(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    VERSION BIGINT,
    JOB_INSTANCE_ID BIGINT NOT NULL,
    CREATE_TIME DATETIME(6) NOT NULL,
    START_TIME DATETIME(6) DEFAULT NULL,
    END_TIME DATETIME(6) DEFAULT NULL,
    STATUS VARCHAR(10),
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED DATETIME(6),
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
    REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID BIGINT NOT NULL,
    PARAMETER_NAME VARCHAR(100) NOT NULL,
    PARAMETER_TYPE VARCHAR(100) NOT NULL,
    PARAMETER_VALUE VARCHAR(2500),
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    VERSION BIGINT NOT NULL,
    STEP_NAME VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    CREATE_TIME DATETIME(6) NOT NULL,
    START_TIME DATETIME(6) DEFAULT NULL,
    END_TIME DATETIME(6) DEFAULT NULL,
    STATUS VARCHAR(10),
    COMMIT_COUNT BIGINT,
    READ_COUNT BIGINT,
    FILTER_COUNT BIGINT,
    WRITE_COUNT BIGINT,
    READ_SKIP_COUNT BIGINT,
    WRITE_SKIP_COUNT BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT BIGINT,
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED DATETIME(6),
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
    REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID BIGINT PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- Tablas de secuencia necesarias para Spring Batch MySQL
CREATE TABLE IF NOT EXISTS BATCH_JOB_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    CONSTRAINT UNIQUE_KEY_UN UNIQUE (UNIQUE_KEY)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    CONSTRAINT UNIQUE_KEY_UN2 UNIQUE (UNIQUE_KEY)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    CONSTRAINT UNIQUE_KEY_UN3 UNIQUE (UNIQUE_KEY)
);

-- Inicializar las secuencias con valores iniciales
INSERT IGNORE INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) VALUES (0, '0');
INSERT IGNORE INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) VALUES (0, '0');
INSERT IGNORE INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) VALUES (0, '0');

-- Índices para mejorar rendimiento (MySQL no soporta IF NOT EXISTS para índices)
CREATE INDEX idx_transacciones_fecha ON transacciones(fecha);
CREATE INDEX idx_transacciones_tipo ON transacciones(tipo);
CREATE INDEX idx_cuentas_tipo ON cuentas(tipo);
CREATE INDEX idx_cuentas_anuales_cuenta ON cuentas_anuales(cuenta_id);
CREATE INDEX idx_cuentas_anuales_fecha ON cuentas_anuales(fecha);
