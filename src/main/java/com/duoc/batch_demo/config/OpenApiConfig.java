package com.duoc.batch_demo.config;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;

/**
 * Configuraci칩n de OpenAPI/Swagger para documentar los BFFs.
 * Proporciona documentaci칩n interactiva para cada tipo de cliente.
 */
@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
            .info(new Info()
                .title("Sistema Bancario BFF - APIs Multi-Cliente")
                .description("""
                    ## Sistema de Backend for Frontend (BFF) Bancario
                    
                    Este sistema proporciona APIs especializadas para diferentes tipos de clientes:
                    
                    ### 游깷 BFF Web (Puerto 8081)
                    - **Audiencia**: Aplicaciones web (React, Angular, etc.)
                    - **Caracter칤sticas**: Datos completos, paginaci칩n avanzada, reportes
                    - **Autenticaci칩n**: JWT con sesiones de 2 horas
                    - **Endpoints**: `/api/web/*`
                    
                    ### 游님 BFF M칩vil (Puerto 8082)
                    - **Audiencia**: Aplicaciones m칩viles nativas
                    - **Caracter칤sticas**: Respuestas ligeras, cache agresivo, datos esenciales
                    - **Autenticaci칩n**: JWT con sesiones de 7 d칤as + biometr칤a
                    - **Endpoints**: `/api/mobile/*`
                    
                    ### 游낂 BFF ATM (Puerto 8083)
                    - **Audiencia**: Cajeros autom치ticos
                    - **Caracter칤sticas**: M치xima seguridad, sesiones ultra-cortas, operaciones cr칤ticas
                    - **Autenticaci칩n**: Validaci칩n de tarjeta + PIN + tokens de 5 minutos
                    - **Endpoints**: `/api/atm/*`
                    
                    ### 游댏 Seguridad
                    - Cada BFF tiene su propio sistema de autenticaci칩n
                    - Tokens JWT espec칤ficos por tipo de cliente
                    - Validaciones diferenciadas seg칰n criticidad
                    - Logs de auditor칤a completos
                    
                    ### 游늵 Datos
                    Basado en sistema de procesamiento batch con:
                    - 3000+ transacciones procesadas
                    - Detecci칩n autom치tica de anomal칤as
                    - C치lculo de intereses y estados de cuenta
                    - Arquitectura h칤brida: Multi-Threading + Partitioning
                    """)
                .version("1.0.0")
                .license(new License()
                    .name("MIT License")
                    .url("https://opensource.org/licenses/MIT")))
            
            .servers(List.of(
                new Server()
                    .url("http://localhost:8080")
                    .description("Servidor de desarrollo - Todos los BFFs"),
                new Server()
                    .url("http://localhost:8081")
                    .description("BFF Web - Aplicaciones web"),
                new Server()
                    .url("http://localhost:8082")
                    .description("BFF M칩vil - Aplicaciones m칩viles"),
                new Server()
                    .url("http://localhost:8083")
                    .description("BFF ATM - Cajeros autom치ticos")
            ))
            
            .components(new Components()
                .addSecuritySchemes("BearerAuth", new SecurityScheme()
                    .type(SecurityScheme.Type.HTTP)
                    .scheme("bearer")
                    .bearerFormat("JWT")
                    .description("Token JWT espec칤fico por tipo de cliente"))
                
                .addSecuritySchemes("ATMAuth", new SecurityScheme()
                    .type(SecurityScheme.Type.APIKEY)
                    .in(SecurityScheme.In.HEADER)
                    .name("Authorization")
                    .description("Autenticaci칩n espec칤fica para ATM con headers adicionales"))
            )
            
            .addSecurityItem(new SecurityRequirement()
                .addList("BearerAuth")
                .addList("ATMAuth"));
    }
}
