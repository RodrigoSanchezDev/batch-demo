package com.duoc.batch_demo.config;

import java.sql.SQLException;

import org.springframework.batch.core.step.skip.SkipLimitExceededException;
import org.springframework.batch.core.step.skip.SkipPolicy;
import org.springframework.batch.item.file.FlatFileParseException;
import org.springframework.batch.item.validator.ValidationException;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.dao.DataAccessException;
import org.springframework.retry.RetryPolicy;
import org.springframework.retry.policy.CompositeRetryPolicy;
import org.springframework.retry.policy.ExceptionClassifierRetryPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;

/**
 * Configuraci√≥n de tolerancia a fallos para procesamiento batch.
 * 
 * Implementa pol√≠ticas personalizadas de reintento y omisi√≥n
 * para manejo robusto de errores en operaciones bancarias.
 * 
 * @author Rodrigo Sanchez
 * @version 1.1
 */
@Configuration
public class FaultToleranceConfig {

    // Pol√≠ticas de reintento personalizadas
    
    /**
     * Pol√≠tica de reintento para transacciones bancarias.
     * Maneja diferentes tipos de excepciones con estrategias espec√≠ficas.
     */
    @Bean
    public RetryPolicy transaccionesRetryPolicy() {
        // Pol√≠tica compuesta que combina m√∫ltiples estrategias
        CompositeRetryPolicy retryPolicy = new CompositeRetryPolicy();
        
        // Pol√≠tica basada en clasificaci√≥n de excepciones
        ExceptionClassifierRetryPolicy exceptionPolicy = new ExceptionClassifierRetryPolicy();
        
        // Configurar reintentos espec√≠ficos por tipo de excepci√≥n
        java.util.Map<Class<? extends Throwable>, RetryPolicy> policyMap = 
            new java.util.HashMap<>();
        
        // Errores de base de datos: 5 reintentos (problemas temporales de conectividad)
        SimpleRetryPolicy dbRetryPolicy = new SimpleRetryPolicy();
        dbRetryPolicy.setMaxAttempts(5);
        policyMap.put(SQLException.class, dbRetryPolicy);
        policyMap.put(DataAccessException.class, dbRetryPolicy);
        
        // üîÑ Errores de validaci√≥n: 2 reintentos (datos potencialmente corregibles)
        SimpleRetryPolicy validationRetryPolicy = new SimpleRetryPolicy();
        validationRetryPolicy.setMaxAttempts(2);
        policyMap.put(ValidationException.class, validationRetryPolicy);
        
        // üîÑ Errores de parsing: 1 reintento (problemas de formato)
        SimpleRetryPolicy parseRetryPolicy = new SimpleRetryPolicy();
        parseRetryPolicy.setMaxAttempts(1);
        policyMap.put(FlatFileParseException.class, parseRetryPolicy);
        
        // üîÑ Errores runtime gen√©ricos: 3 reintentos
        SimpleRetryPolicy runtimeRetryPolicy = new SimpleRetryPolicy();
        runtimeRetryPolicy.setMaxAttempts(3);
        policyMap.put(RuntimeException.class, runtimeRetryPolicy);
        
        exceptionPolicy.setPolicyMap(policyMap);
        retryPolicy.setPolicies(new RetryPolicy[]{exceptionPolicy});
        
        return retryPolicy;
    }
    
    /**
     * üîÑ Pol√≠tica de reintento para cuentas bancarias (m√°s conservadora)
     */
    @Bean 
    public RetryPolicy cuentasRetryPolicy() {
        CompositeRetryPolicy retryPolicy = new CompositeRetryPolicy();
        ExceptionClassifierRetryPolicy exceptionPolicy = new ExceptionClassifierRetryPolicy();
        
        java.util.Map<Class<? extends Throwable>, RetryPolicy> policyMap = 
            new java.util.HashMap<>();
        
        // üîÑ Para cuentas, ser m√°s conservadores con los reintentos
        SimpleRetryPolicy dbRetryPolicy = new SimpleRetryPolicy();
        dbRetryPolicy.setMaxAttempts(3); // Menos reintentos para cuentas
        policyMap.put(SQLException.class, dbRetryPolicy);
        policyMap.put(DataAccessException.class, dbRetryPolicy);
        
        SimpleRetryPolicy validationRetryPolicy = new SimpleRetryPolicy();
        validationRetryPolicy.setMaxAttempts(1);
        policyMap.put(ValidationException.class, validationRetryPolicy);
        
        SimpleRetryPolicy runtimeRetryPolicy = new SimpleRetryPolicy();
        runtimeRetryPolicy.setMaxAttempts(2);
        policyMap.put(RuntimeException.class, runtimeRetryPolicy);
        
        exceptionPolicy.setPolicyMap(policyMap);
        retryPolicy.setPolicies(new RetryPolicy[]{exceptionPolicy});
        
        return retryPolicy;
    }
    
    // ============================================
    // POL√çTICAS DE OMISI√ìN PERSONALIZADAS
    // ============================================
    
    /**
     * ‚è≠Ô∏è Pol√≠tica de omisi√≥n inteligente para transacciones
     * Decide qu√© errores pueden saltarse y cu√°les son cr√≠ticos
     */
    @Bean
    public SkipPolicy transaccionesSkipPolicy() {
        return new SkipPolicy() {
            private int skipCount = 0;
            private final int maxSkipCount = 10; // L√≠mite m√°ximo personalizable
            
            @Override
            public boolean shouldSkip(Throwable t, long skipCount) throws SkipLimitExceededException {
                // üö´ NUNCA omitir errores cr√≠ticos de seguridad
                if (t instanceof SecurityException || t instanceof IllegalAccessException) {
                    System.err.println("üîí ERROR CR√çTICO DE SEGURIDAD - NO SE PUEDE OMITIR: " + t.getMessage());
                    return false;
                }
                
                // üö´ NUNCA omitir si se excede el l√≠mite personalizado
                if (this.skipCount >= maxSkipCount) {
                    System.err.println("‚ö†Ô∏è L√çMITE DE OMISIONES EXCEDIDO (" + maxSkipCount + ") - DETENIENDO");
                    throw new SkipLimitExceededException(maxSkipCount, t);
                }
                
                // ‚úÖ PERMITIR omitir errores de validaci√≥n de datos
                if (t instanceof ValidationException) {
                    this.skipCount++;
                    System.out.println("‚è≠Ô∏è OMITIENDO ERROR DE VALIDACI√ìN (" + this.skipCount + "/" + maxSkipCount + "): " + t.getMessage());
                    return true;
                }
                
                // ‚úÖ PERMITIR omitir errores de parsing de archivos
                if (t instanceof FlatFileParseException) {
                    this.skipCount++;
                    System.out.println("‚è≠Ô∏è OMITIENDO ERROR DE PARSING (" + this.skipCount + "/" + maxSkipCount + "): " + t.getMessage());
                    return true;
                }
                
                // ‚úÖ PERMITIR omitir errores de datos faltantes (NumberFormatException, NullPointerException)
                if (t instanceof NumberFormatException || t instanceof NullPointerException) {
                    this.skipCount++;
                    System.out.println("‚è≠Ô∏è OMITIENDO ERROR DE DATOS (" + this.skipCount + "/" + maxSkipCount + "): " + t.getMessage());
                    return true;
                }
                
                // üîç EVALUAR otros errores caso por caso
                if (t instanceof RuntimeException) {
                    // Verificar si es un error recuperable
                    String message = t.getMessage();
                    if (message != null && (
                        message.contains("timeout") || 
                        message.contains("temporary") ||
                        message.contains("retry") ||
                        message.contains("connection"))) {
                        
                        this.skipCount++;
                        System.out.println("‚è≠Ô∏è OMITIENDO ERROR TEMPORAL (" + this.skipCount + "/" + maxSkipCount + "): " + message);
                        return true;
                    }
                }
                
                // üö´ Por defecto, NO omitir errores desconocidos
                System.err.println("üõë ERROR NO OMISIBLE: " + t.getClass().getSimpleName() + " - " + t.getMessage());
                return false;
            }
        };
    }
    
    /**
     * ‚è≠Ô∏è Pol√≠tica de omisi√≥n m√°s estricta para cuentas bancarias
     */
    @Bean
    public SkipPolicy cuentasSkipPolicy() {
        return new SkipPolicy() {
            private int skipCount = 0;
            private final int maxSkipCount = 5; // L√≠mite m√°s bajo para cuentas
            
            @Override
            public boolean shouldSkip(Throwable t, long skipCount) throws SkipLimitExceededException {
                // üö´ Para cuentas, ser M√ÅS estrictos
                if (this.skipCount >= maxSkipCount) {
                    System.err.println("‚ö†Ô∏è L√çMITE DE OMISIONES PARA CUENTAS EXCEDIDO (" + maxSkipCount + ")");
                    throw new SkipLimitExceededException(maxSkipCount, t);
                }
                
                // üö´ NO omitir errores de base de datos para cuentas
                if (t instanceof SQLException || t instanceof DataAccessException) {
                    System.err.println("üö´ ERROR DE BD EN CUENTAS - NO SE OMITE: " + t.getMessage());
                    return false;
                }
                
                // ‚úÖ Solo omitir errores muy espec√≠ficos y seguros
                if (t instanceof ValidationException && t.getMessage().contains("edad")) {
                    this.skipCount++;
                    System.out.println("‚è≠Ô∏è OMITIENDO VALIDACI√ìN DE EDAD (" + this.skipCount + "/" + maxSkipCount + ")");
                    return true;
                }
                
                if (t instanceof NullPointerException && t.getMessage().contains("nombre")) {
                    this.skipCount++;
                    System.out.println("‚è≠Ô∏è OMITIENDO NOMBRE NULO (" + this.skipCount + "/" + maxSkipCount + ")");
                    return true;
                }
                
                // üö´ Por defecto, NO omitir nada m√°s para cuentas
                System.err.println("üõë ERROR EN CUENTA NO OMISIBLE: " + t.getMessage());
                return false;
            }
        };
    }
    
    // ============================================
    // LISTENERS DE MONITOREO Y LOGGING
    // ============================================
    
    /**
     * üìä Listener para monitorear reintentos y omisiones
     */
    @Bean
    public org.springframework.batch.core.StepExecutionListener faultToleranceListener() {
        return new org.springframework.batch.core.StepExecutionListener() {
            @Override
            public void beforeStep(org.springframework.batch.core.StepExecution stepExecution) {
                System.out.println("üõ°Ô∏è INICIANDO STEP CON POL√çTICAS DE TOLERANCIA A FALLOS: " + stepExecution.getStepName());
            }
            
            @Override
            public org.springframework.batch.core.ExitStatus afterStep(org.springframework.batch.core.StepExecution stepExecution) {
                System.out.println("üìà ESTAD√çSTICAS DE TOLERANCIA A FALLOS para " + stepExecution.getStepName() + ":");
                System.out.println("   üîÑ Rollbacks: " + stepExecution.getRollbackCount());
                System.out.println("   ‚è≠Ô∏è Registros omitidos (lectura): " + stepExecution.getReadSkipCount());
                System.out.println("   ‚è≠Ô∏è Registros omitidos (procesamiento): " + stepExecution.getProcessSkipCount());
                System.out.println("   ‚è≠Ô∏è Registros omitidos (escritura): " + stepExecution.getWriteSkipCount());
                System.out.println("   ‚úÖ Commits exitosos: " + stepExecution.getCommitCount());
                
                // Determinar si el step fue exitoso a pesar de los errores
                if (stepExecution.getReadSkipCount() > 0 || stepExecution.getProcessSkipCount() > 0 || stepExecution.getWriteSkipCount() > 0) {
                    System.out.println("‚ö†Ô∏è STEP COMPLETADO CON OMISIONES - Revisar logs para detalles");
                } else {
                    System.out.println("‚úÖ STEP COMPLETADO SIN ERRORES");
                }
                
                return stepExecution.getExitStatus();
            }
        };
    }
}
