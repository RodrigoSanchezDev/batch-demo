package com.duoc.batch_demo;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.support.JdbcTransactionManager;

import com.duoc.batch_demo.model.AnomaliaTransaccion;
import com.duoc.batch_demo.model.Cuenta;
import com.duoc.batch_demo.model.CuentaAnual;
import com.duoc.batch_demo.model.EstadoCuentaAnual;
import com.duoc.batch_demo.model.InteresCalculado;
import com.duoc.batch_demo.model.Transaccion;

@SpringBootApplication
@EnableBatchProcessing
public class BankBatchSpringBootApplication {

    public static void main(String[] args) throws Exception {
        System.out.println("\nüè¶ ===== SISTEMA DE PROCESAMIENTO BANCARIO BATCH (SPRING BOOT) ===== üè¶");
        System.out.println("üöÄ Iniciando procesamiento de datos bancarios legacy con MySQL...\n");

        // Configurar para no ejecutar autom√°ticamente los jobs
        System.setProperty("spring.batch.job.enabled", "false");

        ConfigurableApplicationContext context = SpringApplication.run(BankBatchSpringBootApplication.class, args);

        try {
            JobLauncher jobLauncher = context.getBean(JobLauncher.class);

            // ============================================
            // EJECUTAR LOS 3 JOBS PRINCIPALES CON DETALLES
            // ============================================
            
            System.out.println("üìä === EJECUTANDO JOB 1: REPORTE DE TRANSACCIONES DIARIAS ===");
            Job reporteTransaccionesJob = context.getBean("reporteTransaccionesJob", Job.class);
            jobLauncher.run(reporteTransaccionesJob, new JobParameters());

            System.out.println("üö® === EJECUTANDO PROCESAMIENTO DE ANOMAL√çAS ===");
            Job anomaliasJob = context.getBean("anomaliasJob", Job.class);
            jobLauncher.run(anomaliasJob, new JobParameters());
            // Las anomal√≠as se procesan junto con las transacciones

            System.out.println("\nüí∞ === EJECUTANDO JOB 2: C√ÅLCULO DE INTERESES MENSUALES ===");
            Job calculoInteresesJob = context.getBean("calculoInteresesJob", Job.class);
            jobLauncher.run(calculoInteresesJob, new JobParameters());

            System.out.println("üíæ === EJECUTANDO GUARDADO DE DETALLES DE INTERESES ===");
            Job interesesDetalleJob = context.getBean("interesesDetalleJob", Job.class);
            jobLauncher.run(interesesDetalleJob, new JobParameters());

            System.out.println("\nüìã === EJECUTANDO JOB 3: GENERACI√ìN DE ESTADOS DE CUENTA ANUALES ===");
            Job estadosCuentaAnualesJob = context.getBean("estadosCuentaAnualesJob", Job.class);
            jobLauncher.run(estadosCuentaAnualesJob, new JobParameters());

            System.out.println("üìà === EJECUTANDO PROCESAMIENTO DE ESTADOS DETALLADOS ===");
            Job estadosDetalleJob = context.getBean("estadosDetalleJob", Job.class);
            jobLauncher.run(estadosDetalleJob, new JobParameters());

            // ============================================
            // NUEVOS JOBS PARA DETECTAR TODAS LAS ANOMAL√çAS
            // ============================================
            System.out.println("\nüîç === EJECUTANDO DETECCI√ìN AVANZADA DE ANOMAL√çAS EN TRANSACCIONES ===");
            Job deteccionAnomal√≠asAvanzadasJob = context.getBean("deteccionAnomal√≠asAvanzadasJob", Job.class);
            jobLauncher.run(deteccionAnomal√≠asAvanzadasJob, new JobParameters());

            System.out.println("\nüîç === EJECUTANDO DETECCI√ìN DE DUPLICADOS Y ANOMAL√çAS EN CUENTAS ===");
            Job deteccionAnomal√≠asCuentasJob = context.getBean("deteccionAnomal√≠asCuentasJob", Job.class);
            jobLauncher.run(deteccionAnomal√≠asCuentasJob, new JobParameters());

            System.out.println("\n‚úÖ ===== PROCESAMIENTO BANCARIO COMPLETADO EXITOSAMENTE ===== ‚úÖ");
            System.out.println("üìà Todos los datos han sido procesados y almacenados en MySQL.");
            System.out.println("üîç Sistema de detecci√≥n avanzada de anomal√≠as ejecutado:");
            System.out.println("   ‚úì Montos negativos y cero detectados");
            System.out.println("   ‚úì Tipos de transacci√≥n inv√°lidos identificados");
            System.out.println("   ‚úì Registros duplicados encontrados");
            System.out.println("   ‚úì Edades fuera de rango detectadas");
            System.out.println("   ‚úì Datos faltantes identificados");
            System.out.println("üîç Ahora puedes conectar MySQL Workbench para ver los resultados.");
            System.out.println("üí° Verificando tablas: transacciones, cuentas, cuentas_anuales,");
            System.out.println("   intereses_calculados, anomalias_transacciones, estados_cuenta_anuales\n");

        } catch (Exception e) {
            System.err.println("‚ùå Error durante el procesamiento: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // No cerrar el contexto inmediatamente para poder revisar la BD
            System.out.println("üîÑ Aplicaci√≥n completada. Los datos permanecen en MySQL para revisi√≥n.");
        }
    }

    // ============================================
    // CONFIGURACI√ìN DE JOBS Y STEPS
    // ============================================

    // ============================================
    // JOB 1: REPORTE DE TRANSACCIONES DIARIAS
    // ============================================
    @Bean
    public Step transaccionesStep(JobRepository jobRepository,
                                 JdbcTransactionManager transactionManager,
                                 ItemReader<Transaccion> transaccionReader,
                                 ItemProcessor<Transaccion, Transaccion> transaccionItemProcessor,
                                 ItemWriter<Transaccion> transaccionWriter) {
        return new StepBuilder("transaccionesStep", jobRepository)
                .<Transaccion, Transaccion>chunk(10, transactionManager)
                .reader(transaccionReader)
                .processor(transaccionItemProcessor)
                .writer(transaccionWriter)
                .build();
    }

    @Bean
    public Job reporteTransaccionesJob(JobRepository jobRepository, Step transaccionesStep) {
        return new JobBuilder("reporteTransaccionesJob", jobRepository)
                .start(transaccionesStep)
                .build();
    }

    // ============================================
    // JOB 2: C√ÅLCULO DE INTERESES MENSUALES
    // ============================================
    @Bean
    public Step interesesStep(JobRepository jobRepository,
                             JdbcTransactionManager transactionManager,
                             ItemReader<Cuenta> cuentaReader,
                             ItemProcessor<Cuenta, Cuenta> interesesItemProcessor,
                             ItemWriter<Cuenta> cuentaWriter) {
        return new StepBuilder("interesesStep", jobRepository)
                .<Cuenta, Cuenta>chunk(10, transactionManager)
                .reader(cuentaReader)
                .processor(interesesItemProcessor)
                .writer(cuentaWriter)
                .build();
    }

    @Bean
    public Job calculoInteresesJob(JobRepository jobRepository, Step interesesStep) {
        return new JobBuilder("calculoInteresesJob", jobRepository)
                .start(interesesStep)
                .build();
    }

    // ============================================
    // JOB 3: GENERACI√ìN DE ESTADOS DE CUENTA ANUALES
    // ============================================
    @Bean
    public Step cuentasAnualesStep(JobRepository jobRepository,
                                  JdbcTransactionManager transactionManager,
                                  ItemReader<CuentaAnual> cuentaAnualReader,
                                  ItemProcessor<CuentaAnual, CuentaAnual> cuentaAnualItemProcessor,
                                  ItemWriter<CuentaAnual> cuentaAnualWriter) {
        return new StepBuilder("cuentasAnualesStep", jobRepository)
                .<CuentaAnual, CuentaAnual>chunk(10, transactionManager)
                .reader(cuentaAnualReader)
                .processor(cuentaAnualItemProcessor)
                .writer(cuentaAnualWriter)
                .build();
    }

    @Bean
    public Job estadosCuentaAnualesJob(JobRepository jobRepository, Step cuentasAnualesStep) {
        return new JobBuilder("estadosCuentaAnualesJob", jobRepository)
                .start(cuentasAnualesStep)
                .build();
    }

    // ============================================
    // JOBS ADICIONALES PARA DETALLES
    // ============================================

    // Job para procesar detalles de intereses calculados
    @Bean
    public Step interesesDetalleStep(JobRepository jobRepository,
                                   JdbcTransactionManager transactionManager,
                                   ItemReader<Cuenta> cuentaReader,
                                   ItemProcessor<Cuenta, InteresCalculado> interesCalculadoItemProcessor,
                                   ItemWriter<InteresCalculado> interesCalculadoWriter) {
        return new StepBuilder("interesesDetalleStep", jobRepository)
                .<Cuenta, InteresCalculado>chunk(10, transactionManager)
                .reader(cuentaReader)
                .processor(interesCalculadoItemProcessor)
                .writer(interesCalculadoWriter)
                .build();
    }

    @Bean
    public Job interesesDetalleJob(JobRepository jobRepository, Step interesesDetalleStep) {
        return new JobBuilder("interesesDetalleJob", jobRepository)
                .start(interesesDetalleStep)
                .build();
    }

    // Job para procesar estados de cuenta detallados
    @Bean
    public Step estadosDetalleStep(JobRepository jobRepository,
                                 JdbcTransactionManager transactionManager,
                                 ItemReader<CuentaAnual> cuentaAnualReader,
                                 ItemProcessor<CuentaAnual, EstadoCuentaAnual> estadoCuentaAnualItemProcessor,
                                 ItemWriter<EstadoCuentaAnual> estadoCuentaAnualWriter) {
        return new StepBuilder("estadosDetalleStep", jobRepository)
                .<CuentaAnual, EstadoCuentaAnual>chunk(10, transactionManager)
                .reader(cuentaAnualReader)
                .processor(estadoCuentaAnualItemProcessor)
                .writer(estadoCuentaAnualWriter)
                .build();
    }

    @Bean
    public Job estadosDetalleJob(JobRepository jobRepository, Step estadosDetalleStep) {
        return new JobBuilder("estadosDetalleJob", jobRepository)
                .start(estadosDetalleStep)
                .build();
    }

    // Job para procesar anomal√≠as de transacciones
    @Bean
    public Step anomaliasStep(JobRepository jobRepository,
                             JdbcTransactionManager transactionManager,
                             ItemReader<Transaccion> anomaliaTransaccionReader,
                             ItemProcessor<Transaccion, AnomaliaTransaccion> simpleAnomaliaProcessor,
                             ItemWriter<AnomaliaTransaccion> anomaliaTransaccionWriter) {
        return new StepBuilder("anomaliasStep", jobRepository)
                .<Transaccion, AnomaliaTransaccion>chunk(10, transactionManager)
                .reader(anomaliaTransaccionReader)
                .processor(simpleAnomaliaProcessor)
                .writer(anomaliaTransaccionWriter)
                .build();
    }

    @Bean
    public Job anomaliasJob(JobRepository jobRepository, Step anomaliasStep) {
        return new JobBuilder("anomaliasJob", jobRepository)
                .start(anomaliasStep)
                .build();
    }

    // ============================================
    // JOBS AVANZADOS PARA DETECCI√ìN DE ANOMAL√çAS CON POL√çTICAS DE REINTENTO Y OMISI√ìN
    // ============================================
    
    // Step para detectar TODAS las anomal√≠as en transacciones
    @Bean
    public Step deteccionAnomal√≠asAvanzadasStep(JobRepository jobRepository,
                                               JdbcTransactionManager transactionManager,
                                               ItemReader<Transaccion> todasLasTransaccionesReader,
                                               ItemProcessor<Transaccion, java.util.List<AnomaliaTransaccion>> detectarAnomal√≠asLegacyProcessor,
                                               org.springframework.batch.item.ItemWriter<java.util.List<AnomaliaTransaccion>> anomaliaListWriter) {
        return new StepBuilder("deteccionAnomal√≠asAvanzadasStep", jobRepository)
                .<Transaccion, java.util.List<AnomaliaTransaccion>>chunk(5, transactionManager)
                .reader(todasLasTransaccionesReader)
                .processor(detectarAnomal√≠asLegacyProcessor)
                .writer(anomaliaListWriter)
                // POL√çTICAS DE REINTENTO Y OMISI√ìN
                .faultTolerant()
                .retry(RuntimeException.class)
                .retryLimit(3) // Reintentar hasta 3 veces
                .skip(Exception.class)
                .skipLimit(5) // Saltar hasta 5 registros problem√°ticos
                .build();
    }

    @Bean
    public Job deteccionAnomal√≠asAvanzadasJob(JobRepository jobRepository, Step deteccionAnomal√≠asAvanzadasStep) {
        return new JobBuilder("deteccionAnomal√≠asAvanzadasJob", jobRepository)
                .start(deteccionAnomal√≠asAvanzadasStep)
                .build();
    }

    // Step para detectar anomal√≠as y duplicados en cuentas
    @Bean
    public Step deteccionAnomal√≠asCuentasStep(JobRepository jobRepository,
                                             JdbcTransactionManager transactionManager,
                                             ItemReader<Cuenta> todasLasCuentasReader,
                                             ItemProcessor<Cuenta, java.util.List<AnomaliaTransaccion>> detectarAnomaliasCuentasProcessor,
                                             org.springframework.batch.item.ItemWriter<java.util.List<AnomaliaTransaccion>> anomaliaListWriter) {
        return new StepBuilder("deteccionAnomal√≠asCuentasStep", jobRepository)
                .<Cuenta, java.util.List<AnomaliaTransaccion>>chunk(5, transactionManager)
                .reader(todasLasCuentasReader)
                .processor(detectarAnomaliasCuentasProcessor)
                .writer(anomaliaListWriter)
                // POL√çTICAS DE REINTENTO Y OMISI√ìN PARA CUENTAS
                .faultTolerant()
                .retry(RuntimeException.class)
                .retryLimit(2) // Menos reintentos para cuentas
                .skip(Exception.class)
                .skipLimit(3) // Saltar hasta 3 cuentas problem√°ticas
                .build();
    }

    @Bean
    public Job deteccionAnomal√≠asCuentasJob(JobRepository jobRepository, Step deteccionAnomal√≠asCuentasStep) {
        return new JobBuilder("deteccionAnomal√≠asCuentasJob", jobRepository)
                .start(deteccionAnomal√≠asCuentasStep)
                .build();
    }
}
